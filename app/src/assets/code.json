[
  {
    "file": "array_sum.s",
    "content": "addi x1, x0, 10      # x1 = 10 (loop limit)\naddi x2, x0, 0       # x2 = 0 (loop counter)\naddi x3, x0, 100     # x3 = 100 (accumulator)\naddi x5, x2, 100     # x3 = 100 (accumulator)\naddi x4, x0, 40        # x4 = address of array\nsub x8, x0, x1 # not x8, x1\nand x2, x3, x5\naddi x9, x0, -100\n#lb x2, x0, -100\n#ori x8, x7, 0x100\n"
  },
  {
    "file": "all_instructions.s",
    "content": "    # Integer Computational Instructions\n    \nstart:\n    # ADD - Addition\n    add x1, x2, x3           # x1 = x2 + x3\n    addi x4, x5, 100          # x4 = x5 + 100 (immediate addition)\n\n    # SUB - Subtraction\n    sub x6, x7, x8            # x6 = x7 - x8\n\n    # Logical Instructions\n    and x9, x10, x11          # Bitwise AND\n    andi x12, x13, 10         # Bitwise AND with immediate\n\n    or x14, x15, x16          # Bitwise OR\n    ori x17, x18, 5           # Bitwise OR with immediate\n\n    xor x19, x20, x21         # Bitwise XOR\n    xori x22, x23, 12         # Bitwise XOR with immediate\n\n    # Shift Instructions\n    sll x24, x25, x26         # Logical Left Shift\n    slli x27, x28, 3          # Logical Left Shift with immediate\n\n    srl x29, x30, x31         # Logical Right Shift\n    srli x1, x2, 4            # Logical Right Shift with immediate\n\n    sra x3, x4, x5            # Arithmetic Right Shift\n    srai x6, x7, 2            # Arithmetic Right Shift with immediate\n\n    # Comparison Instructions\n    #slt x8, x9, x10           # Set Less Than (signed)\n    #slti x11, x12, 50         # Set Less Than Immediate (signed)\n\n    #sltu x13, x14, x15        # Set Less Than (unsigned)\n    #sltiu x16, x17, 100       # Set Less Than Immediate (unsigned)\n\n    # Memory Instructions\n    #lb x18, 0(x19)            # Load Byte (signed)\n    #lh x20, 4(x21)            # Load Halfword (signed)\n    #lw x22, 8(x23)            # Load Word\n    #lbu x24, 12(x25)          # Load Byte Unsigned\n    #lhu x26, 16(x27)          # Load Halfword Unsigned\n\n    #sb x28, 20(x29)           # Store Byte\n    #sh x30, 24(x31)           # Store Halfword\n    #sw x1, 28(x2)             # Store Word\n\n    addi x24, x0, 5\n    sd   x10, 1000(x0)\n    sd   x19, 1008(x0)\n    add x10, x0, x0\n\n    beq x0, x0, lo\n    ld   x10, 1016(x0) # why not working\n    # Branch Instructions\n    beq x3, x4, branch_equal  # Branch if Equal\n    bne x5, x6, branch_not_equal  # Branch if Not Equal\n    blt x7, x8, branch_less_than  # Branch if Less Than (signed)\n    bge x9, x10, branch_greater_equal  # Branch if Greater or Equal (signed)\n    #bltu x11, x12, branch_less_unsigned  # Branch if Less Than (unsigned)\n    #bgeu x13, x14, branch_greater_unsigned  # Branch if Greater or Equal (unsigned)\n\nloop:   beq  x24, x0,  exit\n        addi x5, x5, 1\n        remu x17,  x2, x10\n        add  x25, x24, x0\n        add  x24, x17,  x0\n        beq  x0,  x0,  loop\nlo:\n    add x10, x10, x24\n    addi x24, x24, -1\n    beq  x24, x0,  exit # if x24 < x0\n    bne  x24,  x0,  lo\n\n\nexit:   sd   x2, 1024(x0)\nbranch_equal:\n    nop  # Placeholder for branch targets\n    addi x12, x12, 1\nbranch_not_equal:\n    nop  # Placeholder for branch targets\n    addi x12, x12, 1\nbranch_less_than:\n    nop  # Placeholder for branch targets\n    addi x12, x12, 1\nbranch_greater_equal:\n    nop  # Placeholder for branch targets\n    addi x12, x12, 1\nbranch_less_unsigned:\n    nop  # Placeholder for branch targets\n    addi x12, x12, 1\nbranch_greater_unsigned:\n    nop  # Placeholder for branch targets\n    addi x12, x12, 1\n    # Jump and Link Instructions\n    jal x15, jump_link        # Jump and Link (stores return address)\n    jalr x16, 8(x17)\n    #jalr x16, x17, 8          # Jump and Link Register\n    \njump_link:\n    jalr x0, 0(x1) #(ret)\n    #ret  # Return from subroutine (jalr x0, x1, 0)\n    \n    # Environment and System Instructions\n    #ecall                     # Environment Call (system call)\n    #ebreak                    # Environment Breakpoint\n\n# Note: This code demonstrates instruction usage but does not represent a functional program.\n# It serves as a comprehensive showcase of RISC-V instructions across base and extension sets.\n"
  },
  {
    "file": "fibonacci.s",
    "content": "\tfile\t\"fibonacci.c\"\n\t.option nopic\n\t.text\n\t.align\t2\n\t.globl\tfib\n\t.type\tfib, @function\nfib:\n\taddi\tsp,sp,-32\n\tsw\tra,28(sp)\n\tsw\ts0,24(sp)\n\tsw\ts1,20(sp)\n\taddi\ts0,sp,32\n\tsw\ta0,-20(s0)\n\tlw\ta4,-20(s0)\n\tli\ta5,1\n\tbgt\ta4,a5,.L2\n\tlw\ta5,-20(s0)\n\tj\t.L3\n.L2:\n\tlw\ta5,-20(s0)\n\taddi\ta5,a5,-1\n\tmv\ta0,a5\n\tcall\tfib\n\tmv\ts1,a0\n\tlw\ta5,-20(s0)\n\taddi\ta5,a5,-2\n\tmv\ta0,a5\n\tcall\tfib\n\tmv\ta5,a0\n\tadd\ta5,s1,a5\n.L3:\n\tmv\ta0,a5\n\tlw\tra,28(sp)\n\tlw\ts0,24(sp)\n\tlw\ts1,20(sp)\n\taddi\tsp,sp,32\n\tjr\tra\n\t.size\tfib, .-fib\n\t.align\t2\n\t.globl\treturn_function\n\t.type\treturn_function, @function\nreturn_function:\n\taddi\tsp,sp,-32\n\tsw\ts0,28(sp)\n\taddi\ts0,sp,32\n\tsw\ta0,-20(s0)\n\tlw\ta5,-20(s0)\n\tmv\ta0,a5\n\tlw\ts0,28(sp)\n\taddi\tsp,sp,32\n\tjr\tra\n\t.size\treturn_function, .-return_function\n\t.align\t2\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n\taddi\tsp,sp,-32\n\tsw\tra,28(sp)\n\tsw\ts0,24(sp)\n\taddi\ts0,sp,32\n\tli\ta5,18\n\tsw\ta5,-20(s0)\n\tlw\ta0,-20(s0)\n\tcall\tfib\n\tmv\ta5,a0\n\tmv\ta0,a5\n\tcall\treturn_function\n\tsw\ta0,-24(s0)\n\tlw\ta5,-24(s0)\n\tmv\ta0,a5\n\tlw\tra,28(sp)\n\tlw\ts0,24(sp)\n\taddi\tsp,sp,32\n\tjr\tra\n\t.size\tmain, .-main\n\t.ident\t\"GCC: (GNU) 7.2.0\"\n\n"
  },
  {
    "file": "shii.s",
    "content": "add x1, x2, x3           \naddi x4, x5, 100         \nsub x6, x7, x8            \nand x9, x10, x11         \nandi x12, x13, 10         \nor x14, x15, x16         \nori x17, x18, 5           \nxor x19, x20, x21\nxori x22, x23, 12\naddi x24, x0, 5\nadd x10, x0, x0\n\n# Note: This code demonstrates instruction usage but does not represent a functional program.\n# It serves as a comprehensive showcase of RISC-V instructions across base and extension sets.\n"
  },
  {
    "file": "gcd.s",
    "content": "\t.file\t\"gcd.c\"\n\t.option nopic\n\t.text\n\t.align\t2\n\t.globl\tgcd\n\t.type\tgcd, @function\ngcd:\n\taddi\tsp,sp,-48\n\tsw\tra,44(sp)\n\tsw\ts0,40(sp)\n\taddi\ts0,sp,48\n\tsw\ta0,-36(s0)\n\tsw\ta1,-40(s0)\n\tlw\ta4,-36(s0)\n\tlw\ta5,-40(s0)\n\tbne\ta4,a5,.L2\n\tlw\ta5,-36(s0)\n\tsw\ta5,-20(s0)\n\tj\t.L3\n.L2:\n\tlw\ta4,-36(s0)\n\tlw\ta5,-40(s0)\n\tble\ta4,a5,.L4\n\tlw\ta4,-36(s0)\n\tlw\ta5,-40(s0)\n\tsub\ta5,a4,a5\n\tsw\ta5,-36(s0)\n\tj\t.L5\n.L4:\n\tlw\ta4,-40(s0)\n\tlw\ta5,-36(s0)\n\tsub\ta5,a4,a5\n\tsw\ta5,-40(s0)\n.L5:\n\tlw\ta1,-40(s0)\n\tlw\ta0,-36(s0)\n\tcall\tgcd\n\tsw\ta0,-20(s0)\n.L3:\n\tlw\ta5,-20(s0)\n\tmv\ta0,a5\n\tlw\tra,44(sp)\n\tlw\ts0,40(sp)\n\taddi\tsp,sp,48\n\tjr\tra\n\t.size\tgcd, .-gcd\n\t.align\t2\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n\taddi\tsp,sp,-32\n\tsw\tra,28(sp)\n\tsw\ts0,24(sp)\n\taddi\ts0,sp,32\n\tli\ta5,64\n\tsw\ta5,-20(s0)\n\tli\ta5,48\n\tsw\ta5,-24(s0)\n\tlw\ta1,-24(s0)\n\tlw\ta0,-20(s0)\n\tcall\tgcd\n\tsw\ta0,-28(s0)\n\tlw\ta5,-28(s0)\n\tmv\ta0,a5\n\tlw\tra,28(sp)\n\tlw\ts0,24(sp)\n\taddi\tsp,sp,32\n\tjr\tra\n\t.size\tmain, .-main\n\t.ident\t\"GCC: (GNU) 7.2.0\"\n\n"
  },
  {
    "file": "binary_search.s",
    "content": "\t.file\t\"binary_search.c\"\n\t.option nopic\n\t.text\n\t.align\t2\n\t.globl\tbinary_search\n\t.type\tbinary_search, @function\nbinary_search:\n\taddi\tsp,sp,-48\n\tsw\tra,44(sp)\n\tsw\ts0,40(sp)\n\taddi\ts0,sp,48\n\tsw\ta0,-36(s0)\n\tsw\ta1,-40(s0)\n\tsw\ta2,-44(s0)\n\tsw\ta3,-48(s0)\n\tlw\ta4,-48(s0)\n\tlw\ta5,-44(s0)\n\tsub\ta5,a4,a5\n\tsrli\ta4,a5,31\n\tadd\ta5,a4,a5\n\tsrai\ta5,a5,1\n\tmv\ta4,a5\n\tlw\ta5,-44(s0)\n\tadd\ta5,a5,a4\n\tsw\ta5,-20(s0)\n\tlw\ta4,-44(s0)\n\tlw\ta5,-48(s0)\n\tble\ta4,a5,.L2\n\tli\ta5,-1\n\tj\t.L3\n.L2:\n\tlw\ta5,-20(s0)\n\tslli\ta5,a5,2\n\tlw\ta4,-36(s0)\n\tadd\ta5,a4,a5\n\tlw\ta5,0(a5)\n\tlw\ta4,-40(s0)\n\tbne\ta4,a5,.L4\n\tlw\ta5,-20(s0)\n\tj\t.L3\n.L4:\n\tlw\ta5,-20(s0)\n\tslli\ta5,a5,2\n\tlw\ta4,-36(s0)\n\tadd\ta5,a4,a5\n\tlw\ta5,0(a5)\n\tlw\ta4,-40(s0)\n\tbge\ta4,a5,.L5\n\tlw\ta5,-20(s0)\n\taddi\ta5,a5,-1\n\tmv\ta3,a5\n\tlw\ta2,-44(s0)\n\tlw\ta1,-40(s0)\n\tlw\ta0,-36(s0)\n\tcall\tbinary_search\n\tmv\ta5,a0\n\tj\t.L3\n.L5:\n\tlw\ta5,-20(s0)\n\taddi\ta5,a5,1\n\tlw\ta3,-48(s0)\n\tmv\ta2,a5\n\tlw\ta1,-40(s0)\n\tlw\ta0,-36(s0)\n\tcall\tbinary_search\n\tmv\ta5,a0\n.L3:\n\tmv\ta0,a5\n\tlw\tra,44(sp)\n\tlw\ts0,40(sp)\n\taddi\tsp,sp,48\n\tjr\tra\n\t.size\tbinary_search, .-binary_search\n\t.align\t2\n\t.globl\tsearch\n\t.type\tsearch, @function\nsearch:\n\taddi\tsp,sp,-32\n\tsw\tra,28(sp)\n\tsw\ts0,24(sp)\n\taddi\ts0,sp,32\n\tsw\ta0,-20(s0)\n\tsw\ta1,-24(s0)\n\tsw\ta2,-28(s0)\n\tlw\ta5,-28(s0)\n\taddi\ta5,a5,-1\n\tmv\ta3,a5\n\tli\ta2,0\n\tlw\ta1,-24(s0)\n\tlw\ta0,-20(s0)\n\tcall\tbinary_search\n\tmv\ta5,a0\n\tmv\ta0,a5\n\tlw\tra,28(sp)\n\tlw\ts0,24(sp)\n\taddi\tsp,sp,32\n\tjr\tra\n\t.size\tsearch, .-search\n\t.align\t2\n\t.globl\tsort\n\t.type\tsort, @function\nsort:\n\taddi\tsp,sp,-48\n\tsw\ts0,44(sp)\n\taddi\ts0,sp,48\n\tsw\ta0,-36(s0)\n\tsw\ta1,-40(s0)\n\tsw\tzero,-20(s0)\n\tj\t.L9\n.L13:\n\tsw\tzero,-24(s0)\n\tj\t.L10\n.L12:\n\tlw\ta5,-24(s0)\n\taddi\ta5,a5,1\n\tslli\ta5,a5,2\n\tlw\ta4,-36(s0)\n\tadd\ta5,a4,a5\n\tlw\ta4,0(a5)\n\tlw\ta5,-24(s0)\n\tslli\ta5,a5,2\n\tlw\ta3,-36(s0)\n\tadd\ta5,a3,a5\n\tlw\ta5,0(a5)\n\tbge\ta4,a5,.L11\n\tlw\ta5,-24(s0)\n\tslli\ta5,a5,2\n\tlw\ta4,-36(s0)\n\tadd\ta5,a4,a5\n\tlw\ta5,0(a5)\n\tsw\ta5,-28(s0)\n\tlw\ta5,-24(s0)\n\taddi\ta5,a5,1\n\tslli\ta5,a5,2\n\tlw\ta4,-36(s0)\n\tadd\ta4,a4,a5\n\tlw\ta5,-24(s0)\n\tslli\ta5,a5,2\n\tlw\ta3,-36(s0)\n\tadd\ta5,a3,a5\n\tlw\ta4,0(a4)\n\tsw\ta4,0(a5)\n\tlw\ta5,-24(s0)\n\taddi\ta5,a5,1\n\tslli\ta5,a5,2\n\tlw\ta4,-36(s0)\n\tadd\ta5,a4,a5\n\tlw\ta4,-28(s0)\n\tsw\ta4,0(a5)\n.L11:\n\tlw\ta5,-24(s0)\n\taddi\ta5,a5,1\n\tsw\ta5,-24(s0)\n.L10:\n\tlw\ta4,-40(s0)\n\tlw\ta5,-20(s0)\n\tsub\ta5,a4,a5\n\taddi\ta5,a5,-1\n\tlw\ta4,-24(s0)\n\tblt\ta4,a5,.L12\n\tlw\ta5,-20(s0)\n\taddi\ta5,a5,1\n\tsw\ta5,-20(s0)\n.L9:\n\tlw\ta5,-40(s0)\n\taddi\ta5,a5,-1\n\tlw\ta4,-20(s0)\n\tblt\ta4,a5,.L13\n\tnop\n\tmv\ta0,a5\n\tlw\ts0,44(sp)\n\taddi\tsp,sp,48\n\tjr\tra\n\t.size\tsort, .-sort\n\t.section\t.rodata\n\t.align\t2\n.LC0:\n\t.word\t0\n\t.word\t6\n\t.word\t8\n\t.word\t4\n\t.word\t3\n\t.word\t9\n\t.word\t7\n\t.word\t5\n\t.text\n\t.align\t2\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n\taddi\tsp,sp,-64\n\tsw\tra,60(sp)\n\tsw\ts0,56(sp)\n\taddi\ts0,sp,64\n\tlui\ta5,%hi(.LC0)\n\tlw\ta7,%lo(.LC0)(a5)\n\taddi\ta4,a5,%lo(.LC0)\n\tlw\ta6,4(a4)\n\taddi\ta4,a5,%lo(.LC0)\n\tlw\ta0,8(a4)\n\taddi\ta4,a5,%lo(.LC0)\n\tlw\ta1,12(a4)\n\taddi\ta4,a5,%lo(.LC0)\n\tlw\ta2,16(a4)\n\taddi\ta4,a5,%lo(.LC0)\n\tlw\ta3,20(a4)\n\taddi\ta4,a5,%lo(.LC0)\n\tlw\ta4,24(a4)\n\taddi\ta5,a5,%lo(.LC0)\n\tlw\ta5,28(a5)\n\tsw\ta7,-52(s0)\n\tsw\ta6,-48(s0)\n\tsw\ta0,-44(s0)\n\tsw\ta1,-40(s0)\n\tsw\ta2,-36(s0)\n\tsw\ta3,-32(s0)\n\tsw\ta4,-28(s0)\n\tsw\ta5,-24(s0)\n\taddi\ta5,s0,-52\n\tli\ta1,8\n\tmv\ta0,a5\n\tcall\tsort\n\taddi\ta5,s0,-52\n\tli\ta2,8\n\tli\ta1,9\n\tmv\ta0,a5\n\tcall\tsearch\n\tsw\ta0,-20(s0)\n\tlw\ta5,-20(s0)\n\tmv\ta0,a5\n\tlw\tra,60(sp)\n\tlw\ts0,56(sp)\n\taddi\tsp,sp,64\n\tjr\tra\n\t.size\tmain, .-main\n\t.ident\t\"GCC: (GNU) 7.2.0\"\n\n"
  },
  {
    "file": "mini/Program.s",
    "content": "start:\n    nop\n    addi x1, x0, 1\n    addi x6, x0, 1\n    addi x12, x0, 4\n    sw x6, 0(x1)        # x6 -> R2 Data Dependency (WriteBack)\nloop:\n    lw x6, 0(x1)        # Load Stall\n    addi x6, x6, 1      # x6 -> R1 Data Dependency\n    sw x6, 0(x1)\n    blt x6, x12, loop   # x6 -> R1 Data Dependency (WriteBack) & Control Hazard\ndata_dep_test:\n    addi x8, x0, 55\n    add x8, x0, x8      # x8 -> R2 Data Dependency\n    addi x8, x8, 1      # x8 -> R1 Data Dependency\nfinish:\n    nop"
  }
]